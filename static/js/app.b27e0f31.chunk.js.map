{"version":3,"sources":["constant/index.ts","api/client.ts","components/text/index.tsx","components/card-food/index.tsx","components/input/index.tsx","components/button/index.tsx","components/categories/category.tsx","components/categories/data.ts","components/categories/index.tsx","components/more/index.tsx","screens/home/title.tsx","screens/home/search.tsx","screens/home/new-foods.tsx","screens/home/index.tsx","screens/detail/index.tsx","screens/categories/category.tsx","screens/categories/index.tsx","screens/categorie-child/index.tsx","screens/search/index.tsx","routers/index.tsx","App.tsx","web-build/register-service-worker.js","assets/an-sang.jpg","assets/an-trua.png","assets/an-toi.jpg"],"names":["URLS","COLORS","SIZES","Math","round","Dimensions","get","width","height","httpLink","createHttpLink","uri","link","setContext","_","a","async","headers","AsyncStorage","getItem","token","authorization","concat","cache","InMemoryCache","client","ApolloClient","memo","children","type","style","Text","lineHeight","fontFamily","styles","StyleSheet","create","card","borderWidth","borderColor","borderRadius","overflow","img","backgroundColor","text_wrap","padding","text","food","navigation","useNavigation","View","TouchableOpacity","onPress","navigate","title","id","Image","source","recipeImage","props","TextInput","ButtonCus","Button","box","flexDirection","alignItems","margin","wrap_text","paddingHorizontal","fontSize","category","categoriesList","require","Categories","horizontal","showsHorizontalScrollIndicator","contentContainerStyle","map","key","wrap","More","Entypo","name","size","color","display","icon","marginLeft","marginRight","Search","AntDesign","NEW_DISH_QUERY","gql","flexGrow","button","NewFoods","useQuery","data","loading","console","log","FlatList","dishs","renderItem","item","flex","keyExtractor","numColumns","wrap_section","paddingBottom","section","center","justifyContent","HomeScreen","moveToCategories","SafeAreaView","paddingTop","DISH_QUERY","content","position","top","left","right","borderTopStartRadius","borderTopEndRadius","marginBottom","section_title","border","borderBottomColor","borderBottomWidth","borderStyle","dot","marginTop","DetailsScreen","route","useRoute","setOptions","params","variables","dish","resizeMode","description","length","ingredients","i","steps","step","index","imgs","paddingVertical","CardCategory","cates","CATEGORIES_QUERY","categories","CategorieChild","SearchScreen","Stack","createStackNavigator","Routers","NavigationContainer","Navigator","initialRouteName","Screen","component","options","header","DetailScreen","App","useFonts","Quicksand_400Regular","Quicksand_600SemiBold","AppLoading","navigator","window","addEventListener","serviceWorker","register","scope","then","info","catch","error","module","exports"],"mappings":"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","file":"static/js/app.b27e0f31.chunk.js","sourcesContent":["import { Dimensions } from 'react-native';\n\n// url\nconst isProduct = process.env.NODE_ENV === 'production';\nconst apiUrl = !isProduct\n  ? 'http://localhost:8080'\n  : 'https://apicook.herokuapp.com';\n\nconst URLS = {\n  api: apiUrl,\n};\n\n// color\nconst COLORS = {\n  blue: '#034694',\n  yellow: '#DBA111',\n  red: '#ED1C24',\n  light: '#D1D3D4',\n};\n\n// font\nconst FONTS = {\n  FONT_FAMILY_REGULAR: 'Quicksand_400Regular',\n  FONT_FAMILY_SEMIBOLD: 'Quicksand_600SemiBold',\n};\n\n// size\nconst SIZES = {\n  SPACE: 15,\n  BORDER_RADIUS: 5,\n  WIDTH_SCREEN: Math.round(Dimensions.get('window').width),\n  HEIGHT_SCREEN: Math.round(Dimensions.get('window').height),\n};\n\nexport { FONTS, SIZES, COLORS, URLS };\n","import { ApolloClient } from 'apollo-client';\nimport { createHttpLink } from 'apollo-link-http';\nimport { setContext } from 'apollo-link-context';\nimport { InMemoryCache } from 'apollo-cache-inmemory';\nimport { AsyncStorage } from 'react-native';\nimport { URLS } from '../constant';\n\nconst httpLink = createHttpLink({\n  uri: `${URLS.api}/graphql`,\n});\n\nconst authLink = setContext(async (_, { headers }) => {\n  // get the authentication token from local storage if it exists\n\n  const token = await AsyncStorage.getItem('token');\n\n  // return the headers to the context so httpLink can read them\n  return {\n    headers: {\n      ...headers,\n      authorization: `Bearer ${token}`,\n    },\n  };\n});\n\nconst link = authLink.concat(httpLink);\n\nexport const cache = new InMemoryCache();\n\nconst client = new ApolloClient({\n  link,\n  cache,\n});\n\nexport default client;\n","import React, { FC, ReactNode, memo } from 'react';\nimport { Text } from 'react-native';\n\ninterface Props {\n  children: ReactNode;\n  type?: 'bold' | 'reglar';\n  style?: any;\n}\n\nconst TextCus: FC<Props> = ({ children, type = 'reglar', style }) => {\n  const fontFamily = () => {\n    switch (type) {\n      case 'bold':\n        return 'Quicksand_600SemiBold';\n      default:\n        return 'Quicksand_400Regular';\n    }\n  };\n\n  return (\n    <Text style={{ lineHeight: 20, fontFamily: fontFamily(), ...style }}>\n      {children}\n    </Text>\n  );\n};\n\nexport default memo(TextCus);\n","import React, { FC, memo } from 'react';\nimport { View, StyleSheet, TouchableOpacity, Image } from 'react-native';\nimport { useNavigation } from '@react-navigation/native';\n\nimport { Text } from '..';\n\ninterface Props {\n  food: any;\n  style?: any;\n}\n\nconst CardFood: FC<Props> = ({ food, style }) => {\n  const navigation = useNavigation();\n\n  const clickMe = () => {\n    navigation.navigate('Detail', {\n      title: food.title,\n      id: food.id,\n    });\n  };\n\n  return (\n    <View style={[styles.card, style]}>\n      <TouchableOpacity onPress={clickMe}>\n        <Image\n          style={styles.img}\n          source={{\n            uri: food.recipeImage,\n          }}\n        />\n      </TouchableOpacity>\n\n      <View style={styles.text_wrap}>\n        <Text type=\"bold\" style={styles.text}>\n          {food.title}\n        </Text>\n      </View>\n    </View>\n  );\n};\n\nconst styles = StyleSheet.create({\n  card: {\n    borderWidth: 1,\n    borderColor: '#eee',\n    borderRadius: 5,\n    overflow: 'hidden',\n  },\n  img: {\n    backgroundColor: '#eee',\n    height: 120,\n  },\n  text_wrap: {\n    padding: 10,\n  },\n  text: {},\n});\n\nexport default memo(CardFood);\n","import React, { FC, memo } from 'react';\nimport { TextInput } from 'react-native';\n\nconst Input: FC<any> = ({ style, ...props }) => {\n  return (\n    <TextInput\n      {...props}\n      style={[style, { fontFamily: 'Quicksand_600SemiBold' }]}\n    />\n  );\n};\n\nexport default memo(Input);\n","import React, { FC } from 'react';\nimport { Button } from 'react-native';\n\nconst ButtonCus: FC<any> = ({ style, ...props }) => {\n  return (\n    <Button\n      {...props}\n      style={[style, { fontFamily: 'Quicksand_600SemiBold' }]}\n    />\n  );\n};\n\nexport default ButtonCus;\n","import React, { memo, FC } from 'react';\nimport { View, StyleSheet, Image, TouchableOpacity } from 'react-native';\nimport { Text } from '..';\nimport { Category as CategoryType } from './type';\nimport { useNavigation } from '@react-navigation/native';\n\ninterface Props {\n  category: CategoryType;\n}\n\nconst Category: FC<Props> = ({ category }) => {\n  const navigation = useNavigation();\n\n  const handlePress = () => navigation.navigate('Categories');\n\n  return (\n    <TouchableOpacity onPress={handlePress}>\n      <View style={styles.box}>\n        <View>\n          <Image style={styles.img} source={category.img} />\n        </View>\n        <View style={styles.wrap_text}>\n          <Text style={styles.text} type=\"bold\">\n            {category.title}\n          </Text>\n        </View>\n      </View>\n    </TouchableOpacity>\n  );\n};\n\nconst styles = StyleSheet.create({\n  box: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    borderRadius: 5,\n    backgroundColor: '#fff',\n    margin: 5,\n    overflow: 'hidden',\n    borderColor: '#eee',\n    borderWidth: 1,\n  },\n\n  wrap_text: {\n    paddingHorizontal: 10,\n  },\n\n  text: {\n    fontSize: 12,\n  },\n\n  img: {\n    height: 60,\n    width: 60,\n    backgroundColor: '#eee',\n  },\n});\n\nexport default memo(Category);\n","import { Category } from './type';\n\nconst categoriesList: Category[] = [\n  {\n    id: 'an-sang',\n    title: 'Ăn sáng',\n    img: require('../../assets/an-sang.jpg'),\n  },\n  {\n    id: 'an-trua',\n    title: 'Ăn trưa',\n    img: require('../../assets/an-trua.png'),\n  },\n  {\n    id: 'an-toi',\n    title: 'Ăn tối',\n    img: require('../../assets/an-toi.jpg'),\n  },\n];\n\nexport { categoriesList };\n","import React from 'react';\nimport { ScrollView } from 'react-native-gesture-handler';\nimport Category from './category';\n\nimport { categoriesList } from './data';\n\nfunction Categories() {\n  return (\n    <ScrollView\n      horizontal\n      showsHorizontalScrollIndicator={false}\n      contentContainerStyle={{ paddingHorizontal: 10 }}\n    >\n      {categoriesList.map((category) => (\n        <Category key={category.id} category={category} />\n      ))}\n    </ScrollView>\n  );\n}\n\nexport default Categories;\n","import React, { FC } from 'react';\nimport { Entypo } from '@expo/vector-icons';\nimport { View, StyleSheet } from 'react-native';\nimport { TouchableOpacity } from 'react-native-gesture-handler';\nimport { SIZES } from '../../constant';\n\ninterface Props {\n  onPress: () => void;\n}\n\nconst More: FC<Props> = ({ onPress }) => {\n  return (\n    <TouchableOpacity onPress={onPress}>\n      <View style={styles.wrap}>\n        <Entypo name=\"chevron-small-right\" size={20} color=\"black\" />\n      </View>\n    </TouchableOpacity>\n  );\n};\n\nconst styles = StyleSheet.create({\n  wrap: {\n    backgroundColor: '#eee',\n    paddingHorizontal: 3,\n    borderRadius: SIZES.BORDER_RADIUS,\n  },\n});\n\nexport default More;\n","import React, { memo, ReactNode, FC } from 'react';\nimport { Text } from '../../components';\n\nconst Title: FC<{ children: ReactNode }> = ({ children }) => {\n  return <Text type=\"bold\">{children}</Text>;\n};\n\nexport default memo(Title);\n","import React from 'react';\nimport { View, StyleSheet, TouchableOpacity } from 'react-native';\nimport { AntDesign } from '@expo/vector-icons';\nimport { Input, Text } from '../../components';\nimport { SIZES } from '../../constant';\nimport { useNavigation } from '@react-navigation/native';\n\nconst Search = () => {\n  const navigation = useNavigation();\n  const gotoSearch = () => navigation.navigate('SearchScreen');\n\n  return (\n    <TouchableOpacity onPress={gotoSearch}>\n      <View style={styles.wrap}>\n        <View style={styles.icon}>\n          <AntDesign name=\"search1\" size={20} color=\"#333\" />\n        </View>\n        <View>\n          <Text type=\"bold\">Tìm kiếm</Text>\n        </View>\n      </View>\n    </TouchableOpacity>\n  );\n};\n\nconst HEIGHT = 35;\n\nconst styles = StyleSheet.create({\n  wrap: {\n    backgroundColor: '#eee',\n    width: SIZES.WIDTH_SCREEN - 30,\n    height: HEIGHT,\n    borderRadius: 5,\n    flexDirection: 'row',\n    display: 'flex',\n    alignItems: 'center',\n  },\n  icon: {\n    marginLeft: 10,\n    marginRight: 15,\n  },\n});\n\nexport default Search;\n","import React from 'react';\nimport { View, StyleSheet, FlatList } from 'react-native';\n\nimport { CardFood, Button, Text } from '../../components';\nimport { SIZES } from '../../constant';\nimport { gql } from 'apollo-boost';\nimport { useQuery } from '@apollo/react-hooks';\n\nconst NEW_DISH_QUERY = gql`\n  query dishs {\n    dishs {\n      id\n      recipeImage\n      title\n    }\n  }\n`;\n\nconst NewFoods = () => {\n  const { data, loading } = useQuery(NEW_DISH_QUERY);\n  if (loading)\n    return (\n      <View>\n        <Text>Loading</Text>\n      </View>\n    );\n\n  console.log('data', data);\n  return (\n    <>\n      <FlatList\n        contentContainerStyle={styles.wrap}\n        data={data.dishs || []}\n        renderItem={({ item }) => (\n          <View style={styles.card}>\n            <CardFood food={item} style={{ flex: 1 }} />\n          </View>\n        )}\n        keyExtractor={(item) => item.id}\n        numColumns={2}\n      />\n\n      <View style={styles.button}>\n        <Button title=\"Xem thêm\" onPress={() => {}} />\n      </View>\n    </>\n  );\n};\n\nconst styles = StyleSheet.create({\n  wrap: {\n    padding: 10,\n    flexGrow: 1,\n  },\n  card: {\n    width: (SIZES.WIDTH_SCREEN - 20) / 2,\n    padding: 5,\n  },\n  button: {\n    padding: 15,\n  },\n});\n\nexport default NewFoods;\n","import React from 'react';\nimport { View, StyleSheet, SafeAreaView } from 'react-native';\nimport { ScrollView } from 'react-native-gesture-handler';\nimport Title from './title';\nimport Suggestions from './suggestions';\nimport Search from './search';\nimport NewFoods from './new-foods';\nimport { Categories, More } from '../../components';\n\nfunction HomeScreen({ navigation }: any) {\n  const moveToCategories = () => {\n    navigation.navigate('Categories');\n  };\n\n  return (\n    <SafeAreaView>\n      <ScrollView\n        contentContainerStyle={{\n          flex: 1,\n          backgroundColor: '#fff',\n        }}\n      >\n        <View style={[styles.section, styles.wrap_section, { paddingTop: 15 }]}>\n          <Search />\n        </View>\n\n        <View style={styles.wrap_section}>\n          <View style={[styles.section, styles.center, { paddingBottom: 5 }]}>\n            <Title>Danh mục</Title>\n            <More onPress={moveToCategories} />\n          </View>\n          <Categories />\n        </View>\n\n        {/* <View style={styles.wrap_section}>\n          <View style={styles.section}>\n            <Title>Gợi ý</Title>\n          </View>\n\n          <Suggestions />\n        </View>\n\n        <View style={styles.wrap_section}>\n          <View style={[styles.section, styles.center, { paddingBottom: 5 }]}>\n            <Title>Yêu thích</Title>\n            <More onPress={moveToCategories} />\n          </View>\n\n          <Suggestions />\n        </View> */}\n\n        <View style={styles.wrap_section}>\n          <View style={[styles.section, styles.center, { paddingBottom: 5 }]}>\n            <Title>Món mới</Title>\n            <More onPress={moveToCategories} />\n          </View>\n\n          <NewFoods />\n        </View>\n      </ScrollView>\n    </SafeAreaView>\n  );\n}\n\nconst styles = StyleSheet.create({\n  wrap_section: {\n    paddingBottom: 20,\n  },\n  paddingBottom: {\n    paddingBottom: 10,\n  },\n  section: {\n    paddingHorizontal: 15,\n    flexDirection: 'row',\n  },\n  center: {\n    justifyContent: 'space-between',\n    alignItems: 'center',\n  },\n});\n\nexport default HomeScreen;\n","import React, { FC } from 'react';\nimport { View, Image, StyleSheet, FlatList } from 'react-native';\nimport { gql } from 'apollo-boost';\nimport { useQuery } from '@apollo/react-hooks';\nimport { useNavigation, useRoute } from '@react-navigation/native';\nimport { ScrollView } from 'react-native-gesture-handler';\nimport { Text } from '../../components';\nimport { COLORS } from '../../constant';\n\nconst DISH_QUERY = gql`\n  query dish($id: String!) {\n    dish(id: $id) {\n      id\n      recipeImage\n      title\n      description\n      ingredients\n      steps {\n        imgs\n        text\n      }\n    }\n  }\n`;\n\nconst DetailsScreen: FC = () => {\n  const navigation = useNavigation();\n  const route = useRoute<any>();\n\n  navigation.setOptions({ title: route.params.title });\n\n  const { data, loading } = useQuery(DISH_QUERY, {\n    variables: { id: route.params.id },\n  });\n\n  if (loading) {\n    return <Text>Loading</Text>;\n  }\n  if (!data) return <Text>No dish</Text>;\n\n  const { dish } = data;\n\n  return (\n    <ScrollView>\n      <Image\n        style={styles.img}\n        source={{\n          uri: dish.recipeImage,\n        }}\n        resizeMode=\"cover\"\n      />\n\n      <View style={styles.content}>\n        <View style={styles.top} />\n        <View style={[styles.section, styles.border]}>\n          <Text\n            style={{\n              fontSize: 20,\n              marginBottom: 15,\n              lineHeight: 25,\n              color: COLORS.blue,\n            }}\n            type=\"bold\"\n          >\n            {dish.title}\n          </Text>\n          {dish.description.length > 0 && <Text>{dish.description}</Text>}\n        </View>\n\n        <View style={[styles.section, styles.border]}>\n          <Text type=\"bold\" style={{ marginBottom: 10 }}>\n            Nguyên liệu:\n          </Text>\n          {dish.ingredients.map((i: string) => (\n            <View style={{ marginBottom: 7, flexDirection: 'row' }}>\n              <View style={[styles.dot]} />\n              <View style={{ flex: 1 }}>\n                <Text key={i}>{i}</Text>\n              </View>\n            </View>\n          ))}\n        </View>\n\n        <View style={[styles.section]}>\n          <Text type=\"bold\" style={{ marginBottom: 10 }}>\n            Cách làm:\n          </Text>\n          {dish.steps.map((step: any, index: number) => (\n            <View\n              key={step.text}\n              style={{ marginBottom: 10, flexDirection: 'row' }}\n            >\n              <View style={[styles.dot]} />\n              <View style={{ flex: 1 }}>\n                <Text style={{ marginBottom: 7 }}>{step.text}</Text>\n\n                <FlatList\n                  data={step.imgs}\n                  horizontal\n                  renderItem={({ item }: { item: string }) => {\n                    return (\n                      <Image\n                        key={item}\n                        style={{\n                          height: 120,\n                          width: 120,\n                          borderRadius: 10,\n                          marginRight: 10,\n                        }}\n                        source={{\n                          uri: item,\n                        }}\n                        resizeMode=\"cover\"\n                      />\n                    );\n                  }}\n                  keyExtractor={(item) => item}\n                />\n              </View>\n            </View>\n          ))}\n        </View>\n      </View>\n    </ScrollView>\n  );\n};\n\nconst size_dot = 8;\n\nconst styles = StyleSheet.create({\n  img: {\n    height: 300,\n  },\n  content: {\n    position: 'relative',\n    backgroundColor: '#fff',\n  },\n  top: {\n    position: 'absolute',\n    top: -30,\n    left: 0,\n    right: 0,\n    backgroundColor: '#fff',\n    height: 30,\n    borderTopStartRadius: 20,\n    borderTopEndRadius: 20,\n  },\n\n  section: {\n    marginBottom: 10,\n    paddingHorizontal: 15,\n    paddingBottom: 15,\n  },\n\n  section_title: {\n    marginBottom: 5,\n  },\n\n  border: {\n    borderBottomColor: COLORS.light,\n    borderBottomWidth: 1,\n    borderStyle: 'dashed',\n  },\n\n  dot: {\n    height: size_dot,\n    width: size_dot,\n    borderRadius: size_dot,\n    backgroundColor: COLORS.yellow,\n    marginRight: 10,\n    marginTop: 7,\n  },\n});\n\nexport default DetailsScreen;\n","import React, { FC } from 'react';\nimport { View, StyleSheet } from 'react-native';\nimport { FlatList } from 'react-native-gesture-handler';\n\nimport { Text } from '../../components';\n\nconst CardCategory: FC<any> = ({ category }) => {\n  return (\n    <View style={styles.wrap}>\n      <View style={styles.title}>\n        <Text type=\"bold\">{category.title}</Text>\n      </View>\n\n      <FlatList\n        data={category.cates}\n        renderItem={({ item }: any) => (\n          <View style={styles.title}>\n            <Text>{item}</Text>\n          </View>\n        )}\n        keyExtractor={(item: string) => item}\n      />\n    </View>\n  );\n};\n\nconst styles = StyleSheet.create({\n  wrap: {\n    borderBottomColor: '#eee',\n    borderBottomWidth: 1,\n  },\n  title: {\n    paddingHorizontal: 15,\n    paddingVertical: 10,\n  },\n});\n\nexport default CardCategory;\n","import { useQuery } from '@apollo/react-hooks';\nimport { gql } from 'apollo-boost';\nimport React from 'react';\nimport { Text } from 'react-native';\nimport { FlatList } from 'react-native-gesture-handler';\n\nimport Category from './category';\n\nconst CATEGORIES_QUERY = gql`\n  query categories {\n    categories {\n      title\n      cates\n    }\n  }\n`;\n\nfunction Categories() {\n  const { data, loading } = useQuery(CATEGORIES_QUERY);\n\n  if (loading) return <Text>Loading</Text>;\n\n  console.log(data);\n\n  return (\n    <FlatList\n      contentContainerStyle={{ backgroundColor: '#fff' }}\n      data={data.categories}\n      renderItem={({ item }: any) => <Category category={item} />}\n      keyExtractor={(category: any) => category.title}\n    />\n  );\n}\n\nexport default Categories;\n","import React from 'react';\nimport { Text } from 'react-native';\nimport { ScrollView } from 'react-native-gesture-handler';\n\nfunction CategorieChild() {\n  return (\n    <ScrollView>\n      <Text>CategorieChild Screen</Text>\n    </ScrollView>\n  );\n}\n\nexport default CategorieChild;\n","import React from 'react';\nimport { Text, View } from 'react-native';\n\nfunction SearchScreen() {\n  return (\n    <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>\n      <Text>Search Screen</Text>\n    </View>\n  );\n}\n\nexport default SearchScreen;\n","import React from 'react';\n\nimport { NavigationContainer } from '@react-navigation/native';\nimport { createStackNavigator } from '@react-navigation/stack';\n\nimport HomeScreen from '../screens/home';\nimport DetailScreen from '../screens/detail';\nimport Categories from '../screens/categories';\nimport CategorieChild from '../screens/categorie-child';\nimport SearchScreen from '../screens/search';\n\nconst Stack = createStackNavigator();\n\nfunction Routers() {\n  return (\n    <NavigationContainer>\n      <Stack.Navigator initialRouteName=\"Home\">\n        <Stack.Screen\n          name=\"Home\"\n          component={HomeScreen}\n          options={() => ({\n            header: () => null,\n          })}\n        />\n        <Stack.Screen name=\"Detail\" component={DetailScreen} />\n        <Stack.Screen name=\"Categories\" component={Categories} />\n        <Stack.Screen name=\"CategorieChild\" component={CategorieChild} />\n        <Stack.Screen name=\"SearchScreen\" component={SearchScreen} />\n      </Stack.Navigator>\n    </NavigationContainer>\n  );\n}\n\nexport default Routers;\n","import React from 'react';\n\nimport { ApolloProvider } from '@apollo/react-hooks';\n\nimport { useFonts } from '@use-expo/font';\nimport { AppLoading } from 'expo';\nimport {\n  Quicksand_400Regular,\n  Quicksand_600SemiBold,\n} from '@expo-google-fonts/quicksand';\n\nimport client from './api/client';\nimport Routers from './routers';\n\nexport default function App() {\n  let [fontsLoaded] = useFonts({\n    Quicksand_400Regular,\n    Quicksand_600SemiBold,\n  });\n\n  if (!fontsLoaded) {\n    return <AppLoading />;\n  }\n\n  return (\n    <ApolloProvider client={client}>\n      <Routers />\n    </ApolloProvider>\n  );\n}\n","/* eslint-env browser */\n\nif ('serviceWorker' in navigator) {\n  window.addEventListener('load', function () {\n    navigator.serviceWorker\n      .register('/cookapp/expo-service-worker.js', { scope: '/cookapp/' })\n      .then(function (info) {\n        // console.info('Registered service-worker', info);\n      })\n      .catch(function (error) {\n        console.info('Failed to register service-worker', error);\n      });\n  });\n}\n","module.exports = __webpack_public_path__ + \"static/media/an-sang.9da58588.jpg\";","module.exports = __webpack_public_path__ + \"static/media/an-trua.d0ff5dd1.png\";","module.exports = __webpack_public_path__ + \"static/media/an-toi.f989c8e1.jpg\";"],"sourceRoot":""}